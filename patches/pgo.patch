diff -u a/build/moz.configure/lto-pgo.configure b/build/moz.configure/lto-pgo.configure
--- a/build/moz.configure/lto-pgo.configure	2024-09-11 08:43:08.688843000 +0000
+++ b/build/moz.configure/lto-pgo.configure	2024-09-11 09:25:15.213173300 +0000
@@ -392,12 +392,12 @@
     # Tell LTO not to inline functions above a certain size, to mitigate
     # binary size growth while still getting good performance.
     # (For hot functions, PGO will put a multiplier on this limit.)
-    if target.os == "WINNT":
-        ldflags.append("-mllvm:-import-instr-limit=10")
-    elif target.kernel == "Darwin":
-        ldflags.append("-Wl,-mllvm,-import-instr-limit=10")
-    elif c_compiler.type == "clang":
-        ldflags.append("-Wl,-plugin-opt=-import-instr-limit=10")
+    # if target.os == "WINNT":
+    #     ldflags.append("-mllvm:-import-instr-limit=10")
+    # elif target.kernel == "Darwin":
+    #     ldflags.append("-Wl,-mllvm,-import-instr-limit=10")
+    # elif c_compiler.type == "clang":
+    #     ldflags.append("-Wl,-plugin-opt=-import-instr-limit=10")
 
     # If we're using the new pass manager, we can also enable the new PM
     # during LTO. Further we can use the resulting size savings to increase
