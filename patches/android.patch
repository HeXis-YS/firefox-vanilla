diff --git a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
index 85ae79e..93ecd0a 100644
--- a/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
+++ b/mobile/android/fenix/app/src/main/java/org/mozilla/fenix/utils/Settings.kt
@@ -340,17 +340,17 @@ class Settings(private val appContext: Context) : PreferencesHolder {
 
     var isTelemetryEnabled by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_telemetry),
-        default = true,
+        default = false,
     )
 
     var isMarketingTelemetryEnabled by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_marketing_telemetry),
-        default = !Config.channel.isMozillaOnline,
+        default = false,
     )
 
     var isExperimentationEnabled by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_experimentation),
-        default = true,
+        default = false,
     )
 
     var isOverrideTPPopupsForPerformanceTest = false
@@ -635,7 +635,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
 
     var shouldEnableGlobalPrivacyControl by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_privacy_enable_global_privacy_control),
-        false,
+        true,
     )
 
     var shouldUseCookieBannerPrivateMode by lazyFeatureFlagPreference(
@@ -740,12 +740,12 @@ class Settings(private val appContext: Context) : PreferencesHolder {
 
     val useStandardTrackingProtection by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_tracking_protection_standard_option),
-        true,
+        false,
     )
 
     val useStrictTrackingProtection by booleanPreference(
         appContext.getPreferenceKey(R.string.pref_key_tracking_protection_strict_default),
-        false,
+        true,
     )
 
     val useCustomTrackingProtection by booleanPreference(
@@ -778,7 +778,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
 
     val useProductionRemoteSettingsServer by booleanPreference(
         key = appContext.getPreferenceKey(R.string.pref_key_remote_server_prod),
-        default = true,
+        default = false,
     )
 
     val enabledTotalCookieProtection: Boolean
@@ -1687,7 +1687,7 @@ class Settings(private val appContext: Context) : PreferencesHolder {
      */
     var showContileFeature by booleanPreference(
         key = appContext.getPreferenceKey(R.string.pref_key_enable_contile),
-        default = true,
+        default = false,
     )
 
     /**
