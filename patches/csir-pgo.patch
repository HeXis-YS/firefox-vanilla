diff --git a/build/moz.configure/lto-pgo.configure b/build/moz.configure/lto-pgo.configure
index 5048b36..0ba10eb 100644
--- a/build/moz.configure/lto-pgo.configure
+++ b/build/moz.configure/lto-pgo.configure
@@ -41,6 +41,23 @@ add_old_configure_assignment(
 )
 
 option(
+    "--enable-profile-generate-cs",
+    nargs="?",
+    choices=("cross",),
+    help="Build a context-sensitive PGO instrumented binary",
+)
+
+set_config(
+    "MOZ_PROFILE_GENERATE_CS", depends_if("--enable-profile-generate-cs")(lambda _: True)
+)
+
+@depends("--enable-profile-generate-cs")
+def profile_generate_cs_rust(profile_generate_cs):
+    return len(profile_generate_cs) and profile_generate_cs[0] == "cross"
+
+set_config("MOZ_PROFILE_GENERATE_CS_RUST", profile_generate_cs_rust)
+
+option(
     "--enable-profile-use",
     env="MOZ_PROFILE_USE",
     nargs="?",
@@ -124,10 +141,11 @@ pgo_temporal = c_compiler.try_compile(
     orderfile_path,
     target_is_windows,
     pgo_temporal,
+    "--enable-profile-generate-cs",
 )
 @imports("multiprocessing")
 def pgo_flags(
-    compiler, linker, target, profdata, orderfile, target_is_windows, pgo_temporal
+    compiler, linker, target, profdata, orderfile, target_is_windows, pgo_temporal, profile_generate_cs
 ):
     if compiler.type == "gcc":
         return namespace(
@@ -142,6 +160,8 @@ def pgo_flags(
         if compiler.type == "clang-cl":
             prefix = "/clang:"
             gen_ldflags = None
+        elif profile_generate_cs:
+            gen_ldflags = ["-fcs-profile-generate"]
         else:
             gen_ldflags = ["-fprofile-generate"]
 
@@ -164,7 +184,10 @@ def pgo_flags(
         if use_ldflags:
             log.info("Activating PGO-based orderfile")
 
-        gen_cflags = [prefix + "-fprofile-generate"]
+        if profile_generate_cs:
+            gen_cflags = [prefix + "-fcs-profile-generate"]
+        else:
+            gen_cflags = [prefix + "-fprofile-generate"]
 
         if pgo_temporal:
             gen_cflags += ["-mllvm", "-pgo-temporal-instrumentation"]
@@ -202,8 +225,8 @@ option(
 set_config("PGO_JARLOG_PATH", depends_if("--with-pgo-jarlog")(lambda p: p))
 
 
-@depends("MOZ_PGO", "--enable-profile-use", "--enable-profile-generate", c_compiler)
-def moz_pgo_rust(pgo, profile_use, profile_generate, c_compiler):
+@depends("MOZ_PGO", "--enable-profile-use", "--enable-profile-generate", "--enable-profile-generate-cs", c_compiler)
+def moz_pgo_rust(pgo, profile_use, profile_generate, profile_generate_cs, c_compiler):
     if not pgo:
         return
 
@@ -211,7 +234,7 @@ def moz_pgo_rust(pgo, profile_use, profile_generate, c_compiler):
     if not profile_use and not profile_generate:
         return
 
-    if profile_use and profile_generate:
+    if profile_use and profile_generate and not profile_generate_cs:
         die("Cannot build with --enable-profile-use and --enable-profile-generate.")
 
     want_cross = (len(profile_use) and profile_use[0] == "cross") or (
diff --git a/config/makefiles/rust.mk b/config/makefiles/rust.mk
index 524bc43..bb59b89 100644
--- a/config/makefiles/rust.mk
+++ b/config/makefiles/rust.mk
@@ -274,8 +274,18 @@ target_rust_ltoable := force-cargo-library-build $(ADD_RUST_LTOABLE)
 target_rust_nonltoable := force-cargo-test-run force-cargo-program-build
 
 ifdef MOZ_PGO_RUST
+rust_pgo_flags :=
+ifdef MOZ_PROFILE_GENERATE_CS
+ifdef MOZ_PROFILE_GENERATE_CS_RUST
+rust_pgo_flags += -C llvm-args=--cs-profile-generate -C llvm-args=--cs-profile-path=$(topobjdir)
+ifeq (1,$(words $(filter 5.% 6.% 7.% 8.% 9.% 10.% 11.%,$(CC_VERSION) $(RUSTC_LLVM_VERSION))))
+rust_pgo_flags += -C llvm-args=--disable-vp=true
+endif
+rust_pgo_flags += $(patsubst -mllvm:%,-C llvm-args=%,$(filter -mllvm:%,$(subst -mllvm ,-mllvm:,$(PROFILE_GEN_CFLAGS))))
+endif
+else
 ifdef MOZ_PROFILE_GENERATE
-rust_pgo_flags := -C profile-generate=$(topobjdir)
+rust_pgo_flags += -C profile-generate=$(topobjdir)
 ifeq (1,$(words $(filter 5.% 6.% 7.% 8.% 9.% 10.% 11.%,$(CC_VERSION) $(RUSTC_LLVM_VERSION))))
 # Disable value profiling when:
 # (RUSTC_LLVM_VERSION < 12 and CC_VERSION >= 12) or (RUSTC_LLVM_VERSION >= 12 and CC_VERSION < 12)
@@ -286,8 +296,10 @@ endif
 # "-mllvm foo" into "-mllvm:foo" so that it becomes a unique argument, that we can then filter for,
 # excluding other flags, and then turn into the right string.
 rust_pgo_flags += $(patsubst -mllvm:%,-C llvm-args=%,$(filter -mllvm:%,$(subst -mllvm ,-mllvm:,$(PROFILE_GEN_CFLAGS))))
-else # MOZ_PROFILE_USE
-rust_pgo_flags := -C profile-use=$(PGO_PROFILE_PATH)
+endif
+endif
+ifdef MOZ_PROFILE_USE
+rust_pgo_flags += -C profile-use=$(PGO_PROFILE_PATH)
 endif
 endif
 
